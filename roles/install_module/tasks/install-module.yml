---

- name: Fail if module name is not set
  ansible.builtin.fail:
    msg: "Module name must be set"
  when: install_module_name is not defined

- name: Set facts
  ansible.builtin.include_tasks: set-facts.yml

- name: Create modules directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ install_module_install_dir }}"
    owner: "{{ host_config.softioc_user }}"
    group: "{{ host_config.softioc_group }}"
    state: "directory"
    mode: "0775"

- name: Handle standard module
  when: not install_module_name.startswith("epics_base")
  block:

    - name: Check if module has already been cloned
      ansible.builtin.stat:
        path: "{{ install_module_dir }}/.git"
      register: install_module_cloned

    # The only changes should be to CONFIG_SITE and RELEASE files,
    # which we will re-apply in a second, so stash them to ensure correct
    # version is checked out in next step.
    - name: Stash any local changes if module already cloned
      ansible.builtin.command:
        "git -C {{ install_module_dir }} stash" # noqa command-instead-of-module
      register: install_module_stash_result
      changed_when: install_module_stash_result.rc == 0
      when: install_module_cloned.stat.exists

    - name: Clone module repository and checkout the correct version
      ansible.builtin.git:
        repo: "{{ install_module_config.url }}"
        dest: "{{ install_module_dir }}"
        version: "{{ install_module_config.version }}"
        force: "{{ install_module_force_reinstall }}"
        # Don't allow recursive clones, because the `.ci`
        # submodule breaks things if cloned.
        recursive: false

    - name: Add module dir to safe dirs list to avoid dubious ownership error
      ansible.builtin.command:
        "git config --global --add safe.directory {{ install_module_dir }}"
        # noqa command-instead-of-module
      register: install_module_make_dir_safe
      changed_when: install_module_make_dir_safe.rc == 0

    - name: If ADCore, install commonPlugin files
      ansible.builtin.copy:
        src: "files/{{ item }}"
        dest: "{{ install_module_dir }}/iocBoot/{{ item }}"
        owner: "{{ host_config.softioc_user }}"
        group: "{{ host_config.softioc_group }}"
        mode: "0664"
      when: install_module_name.startswith("adcore")
      with_items:
        - "commonPlugins.cmd"
        - "commonPlugin_settings.req"

    - name: Create dict to track total config entries for module
      ansible.builtin.set_fact:
        install_module_config_dict:
          "{{ install_module_default_config_dict }}"

    - name: If module is an AD module, include all standard AD features
      ansible.builtin.set_fact:
        install_module_config_dict:
          "{{ install_module_config_dict
          | combine(install_module_ad_config_dict) }}"
      when: >-
        install_module_config.include_base_ad_config is defined and
        install_module_config.include_base_ad_config | bool

    - name: Add any config overrides for module
      ansible.builtin.set_fact:
        install_module_config_dict:
          "{{ install_module_config_dict
          | combine(install_module_config.config) }}"
      when: module.config is defined

    - name: Find all EPICS configure directories for module
      ansible.builtin.find:
        paths: "{{ install_module_dir }}"
        recurse: true
        patterns: "configure"
        file_type: directory
      register: install_module_configure_dirs

    - name: Update RELEASE and CONFIG_SITE files for each configure directory
      ansible.builtin.include_tasks: reset-configure-files.yml
      with_items: "{{ install_module_configure_dirs.files }}"

# base is a special case, because it is cloned recursively, and should not
# have any release/configure files adjusted.
- name: Handle epics_base
  ansible.builtin.git:
    repo: "{{ install_module_config.url }}"
    dest: "{{ install_module_dir }}"
    version: "{{ install_module_config.version }}"
    force: "{{ install_module_force_reinstall }}"
    recursive: true
  when: install_module_name.startswith("epics_base")

- name: Get list of required system packages
  ansible.builtin.set_fact:
    install_module_pkg_deps: "{{ install_module_default_pkg_deps }}"

- name: Add any module-specific required packages
  ansible.builtin.set_fact:
    install_module_pkg_deps:
      "{{ install_module_pkg_deps
      | union(install_module_config.pkg_deps) }}"
  when: install_module_config.pkg_deps is defined

- name: Install any required system packages
  ansible.builtin.dnf:
    name: "{{ install_module_pkg_deps }}"
    state: present

- name: Compile the module
  ansible.builtin.shell:
    # yamllint disable rule:line-length
    cmd: "{{ install_module_compilation_command }}" # noqa: command-instead-of-shell
    # yamllint enable rule:line-length
    chdir: "{{ install_module_dir }}"
  register: install_module_compile_result
  changed_when: install_module_compile_result.rc == 0

- name: Ensure proper ownership of module files
  ansible.builtin.command:
    "chown -R {{ host_config.softioc_user }}:{{ host_config.softioc_group }} {{ install_module_dir }}" # yamllint disable-line rule:line-length
  register: install_module_ownership_result
  changed_when: install_module_ownership_result.rc == 0

- name: Add module to dict mapping module names to paths
  ansible.builtin.set_fact:
    install_module_installed:
      "{{ install_module_installed |
          combine({install_module_config.name | upper:
                    install_module_dir}) }}"

- name: Add module to installed modules list
  ansible.builtin.set_fact:
    install_module_installed_list:
      "{{ install_module_installed_list + [install_module_name] }}"

- name: Set path of installed leaf module
  ansible.builtin.set_fact:
    install_module_leaf_module_path: "{{ install_module_dir }}"
