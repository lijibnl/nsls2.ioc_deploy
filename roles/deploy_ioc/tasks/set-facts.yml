---

- name: Reload default configuration variables
  ansible.builtin.include_vars:
    file: defaults/main.yml

- name: Make sure IOC with given name is configured on host
  ansible.builtin.fail:
    msg: "IOC with name {{ deploy_ioc_ioc_name }} is not configured on host"
  when: deploy_ioc_ioc_name not in deploy_ioc_full_ioc_list

- name: Set IOC configuration to variable
  ansible.builtin.set_fact:
    ioc: "{{ host_config[deploy_ioc_ioc_name] }}"

- name: Display read IOC configuration
  ansible.builtin.debug:
    msg: "{{ ioc }}"

- name: Get IOC type specific default vars
  ansible.builtin.include_vars: "vars/{{ ioc.type }}.yml"

- name: Handle any module requirements
  when: deploy_ioc_required_module is defined or ioc.required_module is defined
  block:
    - name: Set required module
      ansible.builtin.set_fact:
        deploy_ioc_required_module: "{{ deploy_ioc_required_module }}"
      when: deploy_ioc_required_module is defined

    - name: Override default required module if specified
      ansible.builtin.set_fact:
        deploy_ioc_required_module: "{{ ioc.required_module }}"
      when: ioc.required_module is defined

    - name: Install any modules that are required for this IOC type
      ansible.builtin.include_role:
        name: nsls2.ioc_deploy.install_module
      vars:
        install_module_name: "{{ deploy_ioc_required_module }}"

    - name: Create variable that stores path to installed required module
      ansible.builtin.set_fact:
        deploy_ioc_required_module_path: "{{ install_module_leaf_module_path }}"

- name: Get default environment variables for ioc type
  ansible.builtin.set_fact:
    deploy_ioc_merged_env:
      "{{ deploy_ioc_default_env |
          combine(deploy_ioc_device_specific_env) }}"

- name: Merge any installed module locations into environment
  ansible.builtin.set_fact:
    deploy_ioc_merged_env:
      "{{ deploy_ioc_merged_env
          | combine(install_module_epics_deps, install_module_installed) }}"
  when: deploy_ioc_required_module is defined

- name: Merge in instance specific environment
  ansible.builtin.set_fact:
    deploy_ioc_merged_env:
      "{{ deploy_ioc_merged_env | combine(ioc.environment) }}"
  when: ioc.environment is defined

- name: Show merged environment pre-macro substitution
  ansible.builtin.debug:
    msg: "{{ deploy_ioc_merged_env }}"

- name: Find envvars that use macros
  ansible.builtin.set_fact:
    deploy_ioc_envvars_with_macros: "{{ deploy_ioc_merged_env | dict2items |
                                      selectattr('value', 'search', '\\$\\(') |
                                      map(attribute='key') |
                                      list }}"

- name: Expand all macros in value of {{ item }}
  ansible.builtin.include_tasks: process-env.yml
  with_items: "{{ deploy_ioc_envvars_with_macros }}"

- name: Display merged environment
  ansible.builtin.debug:
    msg: "{{ deploy_ioc_merged_env }}"

- name: Override default IOC exe root path if specified
  ansible.builtin.set_fact:
    deploy_ioc_template_root_path: "{{ ioc.ioc_template_root_path }}"
  when: ioc.ioc_template_root_path is defined

- name: Override default IOC exe name if specified
  ansible.builtin.set_fact:
    deploy_ioc_executable: "{{ ioc.executable }}"
  when: ioc.executable is defined

- name: Get list of substitution files
  ansible.builtin.set_fact:
    substitutions: "{{ ioc.substitutions }}"
  when: ioc.substitutions is defined

- name: Merge any ioc specific dbpf entries
  ansible.builtin.set_fact:
    deploy_ioc_dbpf_list:
      "{{ deploy_ioc_dbpf_list + ioc.dbpf }}"
  when: ioc.dbpf is defined
